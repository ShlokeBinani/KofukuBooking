# Complete Replit Prompt for Kofuku Room Booking System

Here's a comprehensive prompt for Replit to create a fully functional voice + text room booking system for Kofuku:

## Project Requirements

Create a modern React TypeScript application with the following specifications:

### **Core Features**
- **Voice-controlled room booking** with "Hey Kofi" activation
- **Text-based booking interface** for manual input
- **Two rooms available**: Conference Room 1 and Cabin 1
- **User authentication system** with role-based access (employees vs head)
- **Email notification system** for bookings and priority requests
- **Calendar integration** for availability checking
- **Team-based booking options**

### **Technical Stack**
```bash
# Use React TypeScript template on Replit
npm create vite@latest kofuku-room-booking -- --template react-ts

# Required dependencies
npm install @types/react @types/react-dom
npm install react-router-dom @types/react-router-dom
npm install axios
npm install react-speech-recognition
npm install react-speech-kit
npm install @headlessui/react @heroicons/react
npm install tailwindcss @tailwindcss/forms
npm install shadcn-ui @radix-ui/react-dialog @radix-ui/react-dropdown-menu
npm install lucide-react
npm install date-fns
npm install react-hook-form @hookform/resolvers zod
npm install nodemailer @types/nodemailer
npm install express @types/express
npm install jsonwebtoken @types/jsonwebtoken
npm install bcryptjs @types/bcryptjs
npm install @replit/database
```

### **Project Structure**
```
kofuku-room-booking/
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”‚   â”œâ”€â”€ VoiceAssistant.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ BookingForm.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Dashboard.tsx
â”‚   â”‚   â”‚   â”œâ”€â”€ LoginForm.tsx
â”‚   â”‚   â”‚   â””â”€â”€ Navigation.tsx
â”‚   â”‚   â”œâ”€â”€ hooks/
â”‚   â”‚   â”‚   â”œâ”€â”€ useVoiceRecognition.ts
â”‚   â”‚   â”‚   â””â”€â”€ useAuth.ts
â”‚   â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”‚   â”œâ”€â”€ api.ts
â”‚   â”‚   â”‚   â””â”€â”€ emailService.ts
â”‚   â”‚   â”œâ”€â”€ types/
â”‚   â”‚   â”‚   â””â”€â”€ index.ts
â”‚   â”‚   â””â”€â”€ App.tsx
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ routes/
â”‚   â”‚   â”œâ”€â”€ auth.ts
â”‚   â”‚   â”œâ”€â”€ bookings.ts
â”‚   â”‚   â””â”€â”€ teams.ts
â”‚   â”œâ”€â”€ middleware/
â”‚   â”‚   â””â”€â”€ auth.ts
â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â””â”€â”€ emailService.ts
â”‚   â””â”€â”€ server.ts
â””â”€â”€ README.md
```

### **Frontend Implementation**

#### **1. Voice Recognition Component (VoiceAssistant.tsx)**
```typescript
import React, { useState, useEffect } from 'react';
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
import { useSpeechSynthesis } from 'react-speech-kit';

interface VoiceAssistantProps {
  onBookingCommand: (command: string) => void;
}

export const VoiceAssistant: React.FC = ({ onBookingCommand }) => {
  const [isListening, setIsListening] = useState(false);
  const { speak } = useSpeechSynthesis();
  
  const {
    transcript,
    listening,
    resetTranscript,
    browserSupportsSpeechRecognition
  } = useSpeechRecognition();

  useEffect(() => {
    if (transcript.toLowerCase().includes('hey kofi')) {
      setIsListening(true);
      speak({ text: "Hello! I'm Kofi, your room booking assistant. How can I help you?" });
      resetTranscript();
    }
    
    if (isListening && transcript) {
      processVoiceCommand(transcript);
    }
  }, [transcript]);

  const processVoiceCommand = (command: string) => {
    const lowerCommand = command.toLowerCase();
    
    if (lowerCommand.includes('book') && lowerCommand.includes('room')) {
      onBookingCommand(command);
      speak({ text: "I'll help you book a room. Let me check availability." });
    }
    
    if (lowerCommand.includes('cancel') || lowerCommand.includes('stop')) {
      setIsListening(false);
      speak({ text: "Goodbye! Call me anytime with 'Hey Kofi'" });
    }
  };

  if (!browserSupportsSpeechRecognition) {
    return Browser doesn't support speech recognition.;
  }

  return (
    
      
         {
            if (isListening) {
              SpeechRecognition.stopListening();
              setIsListening(false);
            } else {
              SpeechRecognition.startListening({ continuous: true });
              setIsListening(true);
            }
          }}
        >
          {isListening ? 'ðŸ›‘' : 'ðŸŽ¤'}
        
        
        {isListening && (
          
            Listening... Say "Hey Kofi" to activate
            {transcript && "{transcript}"}
          
        )}
      
    
  );
};
```

#### **2. Main Booking Component (BookingForm.tsx)**
```typescript
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { format } from 'date-fns';

const bookingSchema = z.object({
  room: z.enum(['conference-room-1', 'cabin-1']),
  date: z.string(),
  startTime: z.string(),
  endTime: z.string(),
  purpose: z.string().min(5, 'Purpose must be at least 5 characters'),
  bookingType: z.enum(['personal', 'team']),
  team: z.string().optional(),
});

type BookingFormData = z.infer;

interface BookingFormProps {
  user: any;
  teams: string[];
}

export const BookingForm: React.FC = ({ user, teams }) => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [conflictData, setConflictData] = useState(null);
  
  const { register, handleSubmit, watch, formState: { errors } } = useForm({
    resolver: zodResolver(bookingSchema),
  });

  const bookingType = watch('bookingType');

  const onSubmit = async (data: BookingFormData) => {
    setIsSubmitting(true);
    
    try {
      const response = await fetch('/api/bookings/check-availability', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      
      const result = await response.json();
      
      if (result.available) {
        await createBooking(data);
      } else {
        setConflictData(result.conflict);
      }
    } catch (error) {
      console.error('Booking error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const createBooking = async (data: BookingFormData) => {
    const response = await fetch('/api/bookings/create', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ...data, userId: user.id }),
    });
    
    if (response.ok) {
      alert('Room booked successfully! Confirmation email sent.');
      window.location.reload();
    }
  };

  const requestPriority = async () => {
    const response = await fetch('/api/bookings/request-priority', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        conflictBookingId: conflictData.id,
        requesterId: user.id,
        reason: 'Urgent work requirement',
      }),
    });
    
    if (response.ok) {
      alert('Priority request sent to head. You will be notified of the decision.');
      setConflictData(null);
    }
  };

  return (
    
      Book a Room
      
      {conflictData && (
        
          Room Already Booked
          
            {conflictData.room} is booked by {conflictData.bookedBy} from{' '}
            {conflictData.startTime} to {conflictData.endTime}
          
          
            Request Priority Access
          
        
      )}
      
      
        
          Room
          
            Select a room
            Conference Room 1
            Cabin 1
          
          {errors.room && {errors.room.message}}
        

        
          
            Date
            
          
          
          
            Start Time
            
          
          
          
            End Time
            
          
        

        
          Booking Type
          
            
              
              Personal Booking
            
            
              
              Team Booking
            
          
        

        {bookingType === 'team' && (
          
            Team
            
              Select your team
              {teams.map(team => (
                {team}
              ))}
            
          
        )}

        
          Purpose
          
          {errors.purpose && {errors.purpose.message}}
        

        
          {isSubmitting ? 'Booking...' : 'Book Room'}
        
      
    
  );
};
```

#### **3. Dashboard Component (Dashboard.tsx)**
```typescript
import React, { useState, useEffect } from 'react';
import { BookingForm } from './BookingForm';
import { VoiceAssistant } from './VoiceAssistant';

interface Booking {
  id: string;
  room: string;
  date: string;
  startTime: string;
  endTime: string;
  purpose: string;
  bookedBy: string;
  team?: string;
  status: 'confirmed' | 'pending' | 'cancelled';
}

interface DashboardProps {
  user: any;
}

export const Dashboard: React.FC = ({ user }) => {
  const [activeTab, setActiveTab] = useState('booking');
  const [bookings, setBookings] = useState([]);
  const [teams, setTeams] = useState([]);

  useEffect(() => {
    fetchBookings();
    fetchTeams();
  }, []);

  const fetchBookings = async () => {
    const response = await fetch('/api/bookings');
    const data = await response.json();
    setBookings(data);
  };

  const fetchTeams = async () => {
    const response = await fetch('/api/teams');
    const data = await response.json();
    setTeams(data);
  };

  const handleVoiceCommand = (command: string) => {
    const lowerCommand = command.toLowerCase();
    
    if (lowerCommand.includes('conference room 1') || lowerCommand.includes('conference room one')) {
      setActiveTab('booking');
      // Auto-fill room selection
    }
    
    if (lowerCommand.includes('cabin 1') || lowerCommand.includes('cabin one')) {
      setActiveTab('booking');
      // Auto-fill room selection
    }
  };

  const futureBookings = bookings.filter(b => new Date(`${b.date} ${b.startTime}`) > new Date());
  const pastBookings = bookings.filter(b => new Date(`${b.date} ${b.startTime}`) 
      
        
          
            
              Kofuku Room Booking
              
                {['booking', 'future', 'history', 'account'].map(tab => (
                   setActiveTab(tab as any)}
                    className={`px-3 py-2 rounded-md text-sm font-medium ${
                      activeTab === tab
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-gray-500 hover:text-gray-700'
                    }`}
                  >
                    {tab.charAt(0).toUpperCase() + tab.slice(1)}
                  
                ))}
              
            
            
              Welcome, {user.name}
               {/* logout logic */}}
                className="text-sm text-red-600 hover:text-red-800"
              >
                Logout
              
            
          
        
      

      
        {activeTab === 'booking' && (
          
        )}
        
        {activeTab === 'future' && (
          
            
              Future Bookings
            
            
              {futureBookings.length === 0 ? (
                No future bookings
              ) : (
                
                  {futureBookings.map(booking => (
                    
                      
                        
                          {booking.room}
                          
                            {booking.date} | {booking.startTime} - {booking.endTime}
                          
                          {booking.purpose}
                        
                        
                          {booking.status}
                        
                      
                    
                  ))}
                
              )}
            
          
        )}
        
        {activeTab === 'history' && (
          
            
              Booking History
            
            
              {pastBookings.length === 0 ? (
                No booking history
              ) : (
                
                  {pastBookings.map(booking => (
                    
                      
                        
                          {booking.room}
                          
                            {booking.date} | {booking.startTime} - {booking.endTime}
                          
                          {booking.purpose}
                        
                        
                          Completed
                        
                      
                    
                  ))}
                
              )}
            
          
        )}
        
        {activeTab === 'account' && (
          
            
              Account Settings
            
            
              
                
                  Name
                  
                
                
                  Email
                  
                
                
                  Department
                  
                
              
            
          
        )}
      
      
      
    
  );
};
```

### **Backend Implementation**

#### **1. Express Server (server.ts)**
```typescript
import express from 'express';
import cors from 'cors';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import nodemailer from 'nodemailer';
import path from 'path';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('frontend/dist'));

// Mock database (use Replit Database in production)
let users = [
  {
    id: '1',
    email: 'head@kofuku.com',
    password: bcrypt.hashSync('password123', 10),
    name: 'Head Admin',
    role: 'head',
    department: 'Management'
  },
  {
    id: '2',
    email: 'employee@kofuku.com',
    password: bcrypt.hashSync('password123', 10),
    name: 'John Doe',
    role: 'employee',
    department: 'Content Team'
  }
];

let bookings = [];
let teams = ['Content Team', 'Tech Team', 'Marketing Team', 'Design Team'];

// Email configuration
const transporter = nodemailer.createTransporter({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// Auth middleware
const authenticateToken = (req: any, res: any, next: any) => {
  const token = req.headers['authorization']?.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ error: 'Access denied' });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret');
    req.user = decoded;
    next();
  } catch (error) {
    res.status(403).json({ error: 'Invalid token' });
  }
};

// Routes
app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;
  
  const user = users.find(u => u.email === email);
  if (!user || !bcrypt.compareSync(password, user.password)) {
    return res.status(401).json({ error: 'Invalid credentials' });
  }
  
  const token = jwt.sign(
    { id: user.id, email: user.email, role: user.role },
    process.env.JWT_SECRET || 'fallback-secret',
    { expiresIn: '24h' }
  );
  
  res.json({
    token,
    user: {
      id: user.id,
      email: user.email,
      name: user.name,
      role: user.role,
      department: user.department
    }
  });
});

app.post('/api/auth/register', async (req, res) => {
  const { name, email, password, department } = req.body;
  
  if (users.find(u => u.email === email)) {
    return res.status(400).json({ error: 'User already exists' });
  }
  
  const hashedPassword = bcrypt.hashSync(password, 10);
  const newUser = {
    id: Date.now().toString(),
    email,
    password: hashedPassword,
    name,
    role: 'employee',
    department
  };
  
  users.push(newUser);
  
  res.json({ message: 'User registered successfully' });
});

app.get('/api/teams', authenticateToken, (req, res) => {
  res.json(teams);
});

app.post('/api/teams', authenticateToken, (req, res) => {
  const { user } = req as any;
  
  if (user.role !== 'head') {
    return res.status(403).json({ error: 'Only head can manage teams' });
  }
  
  const { name } = req.body;
  teams.push(name);
  
  res.json({ message: 'Team added successfully' });
});

app.get('/api/bookings', authenticateToken, (req, res) => {
  res.json(bookings);
});

app.post('/api/bookings/check-availability', authenticateToken, (req, res) => {
  const { room, date, startTime, endTime } = req.body;
  
  const conflict = bookings.find(booking =>
    booking.room === room &&
    booking.date === date &&
    ((startTime >= booking.startTime && startTime  booking.startTime && endTime = booking.endTime))
  );
  
  if (conflict) {
    const bookedUser = users.find(u => u.id === conflict.userId);
    res.json({
      available: false,
      conflict: {
        id: conflict.id,
        room: conflict.room,
        startTime: conflict.startTime,
        endTime: conflict.endTime,
        bookedBy: bookedUser?.name || 'Unknown',
        team: conflict.team
      }
    });
  } else {
    res.json({ available: true });
  }
});

app.post('/api/bookings/create', authenticateToken, async (req, res) => {
  const { user } = req as any;
  const { room, date, startTime, endTime, purpose, bookingType, team } = req.body;
  
  const booking = {
    id: Date.now().toString(),
    userId: user.id,
    room,
    date,
    startTime,
    endTime,
    purpose,
    bookingType,
    team,
    status: 'confirmed',
    createdAt: new Date().toISOString()
  };
  
  bookings.push(booking);
  
  // Send confirmation email to user
  const currentUser = users.find(u => u.id === user.id);
  await sendBookingConfirmationEmail(currentUser, booking);
  
  // Send notification email to head
  const headUser = users.find(u => u.role === 'head');
  await sendHeadNotificationEmail(headUser, currentUser, booking);
  
  res.json({ message: 'Booking created successfully', booking });
});

app.post('/api/bookings/request-priority', authenticateToken, async (req, res) => {
  const { user } = req as any;
  const { conflictBookingId, reason } = req.body;
  
  const conflictBooking = bookings.find(b => b.id === conflictBookingId);
  if (!conflictBooking) {
    return res.status(404).json({ error: 'Booking not found' });
  }
  
  const requester = users.find(u => u.id === user.id);
  const currentBooker = users.find(u => u.id === conflictBooking.userId);
  const headUser = users.find(u => u.role === 'head');
  
  // Send priority request email to head
  await sendPriorityRequestEmail(headUser, requester, currentBooker, conflictBooking, reason);
  
  res.json({ message: 'Priority request sent successfully' });
});

// Email functions
async function sendBookingConfirmationEmail(user: any, booking: any) {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: user.email,
    subject: `Room Booking Confirmation - ${booking.room}`,
    html: `
      Booking Confirmed
      Dear ${user.name},
      Your room booking has been confirmed:
      
        Room: ${booking.room}
        Date: ${booking.date}
        Time: ${booking.startTime} - ${booking.endTime}
        Purpose: ${booking.purpose}
      
      Best regards,Kofuku Room Booking System
    `
  };
  
  await transporter.sendMail(mailOptions);
}

async function sendHeadNotificationEmail(headUser: any, booker: any, booking: any) {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: headUser.email,
    subject: `New Room Booking - ${booking.room}`,
    html: `
      New Room Booking
      Dear ${headUser.name},
      A new room booking has been made:
      
        Booked by: ${booker.name} (${booker.department})
        Room: ${booking.room}
        Date: ${booking.date}
        Time: ${booking.startTime} - ${booking.endTime}
        Purpose: ${booking.purpose}
        Type: ${booking.bookingType}
        ${booking.team ? `Team: ${booking.team}` : ''}
      
      Best regards,Kofuku Room Booking System
    `
  };
  
  await transporter.sendMail(mailOptions);
}

async function sendPriorityRequestEmail(headUser: any, requester: any, currentBooker: any, booking: any, reason: string) {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: headUser.email,
    subject: `Priority Room Request - ${booking.room}`,
    html: `
      Priority Room Request
      Dear ${headUser.name},
      ${requester.name} from ${requester.department} is requesting priority access to a room that is currently booked:
      
      Current Booking:
      
        Booked by: ${currentBooker.name} (${currentBooker.department})
        Room: ${booking.room}
        Date: ${booking.date}
        Time: ${booking.startTime} - ${booking.endTime}
        Purpose: ${booking.purpose}
      
      
      Priority Request:
      
        Requested by: ${requester.name} (${requester.department})
        Reason: ${reason}
      
      
      Please review and decide whether to approve this priority request.
      Best regards,Kofuku Room Booking System
    `
  };
  
  await transporter.sendMail(mailOptions);
}

// Serve React app
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../frontend/dist/index.html'));
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

### **Environment Setup**

#### **1. Environment Variables (.env)**
```bash
JWT_SECRET=your-super-secret-jwt-key-here
EMAIL_USER=your-gmail-address@gmail.com
EMAIL_PASS=your-gmail-app-password
REPLIT_DB_URL=your-replit-database-url
```

#### **2. TailwindCSS Configuration (tailwind.config.js)**
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'kofuku-blue': '#2563eb',
        'kofuku-green': '#059669',
      }
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}
```

#### **3. Vite Configuration (vite.config.ts)**
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:3000',
        changeOrigin: true,
      },
    },
  },
})
```

### **Additional Features to Implement**

1. **Real-time updates** using WebSockets for live booking status
2. **Calendar view** integration for better visualization
3. **Mobile responsiveness** for smartphone access
4. **Push notifications** for booking reminders
5. **Analytics dashboard** for head admin to track room usage
6. **Recurring bookings** for regular meetings
7. **Room capacity management** and social distancing features
8. **Integration with company calendar systems** (Google Calendar, Outlook)

### **Deployment Instructions**

1. **Clone repository** in Replit
2. **Install dependencies** using provided commands
3. **Set environment variables** in Replit secrets
4. **Configure email service** (Gmail App Password)
5. **Set up Replit Database** for persistent storage
6. **Test voice recognition** in modern browsers
7. **Deploy and share** with team members

This comprehensive implementation provides a modern, feature-rich room booking system with voice control, email notifications, and role-based access management specifically designed for Kofuku's needs [1][2][3][4][5][6][7][8][9][10][11][12][13][14][15][16][17][18][19][20][21][22].

[1] https://dev.to/jennasys/setting-up-a-full-stack-application-on-replit-444e
[2] https://dev.to/roopalisingh/building-a-voice-assistant-3g09
[3] https://stateful.com/blog/google-calendar-react
[4] https://replit.com/@replit/React-TypeScript
[5] https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API
[6] https://github.com/Developer-Amit/google-calendar-react
[7] https://javascript.plainenglish.io/implementing-text-to-voice-and-voice-to-text-in-your-react-application-c6cb951d3903?gi=9a72a7480e97
[8] https://nodemailer.com
[9] https://www.bezkoder.com/react-typescript-authentication-example/
[10] https://www.npmjs.com/package/@demark-pro/react-booking-calendar/v/1.2.3
[11] https://sendlayer.com/blog/how-to-send-emails-with-react/
[12] https://react.email/docs/integrations/nodemailer
[13] https://auth0.com/blog/complete-guide-to-react-user-authentication/
[14] https://www.builder.io/blog/react-component-library
[15] https://dev.to/sadiqful/how-to-setup-tailwind-css-in-your-react-app-27ao
[16] https://dev.to/sanditzz/how-to-use-shadcn-ui-with-a-react-project-gfh
[17] https://www.thefrontendcompany.com/posts/react-ui-component-library
[18] https://www.geekster.in/articles/installing-tailwind-css-in-react/
[19] https://www.youtube.com/watch?v=97r_KBgbQKA
[20] https://www.supernova.io/blog/top-10-pre-built-react-frontend-ui-libraries-for-2025
[21] https://dev.to/nitinfab/want-to-setup-and-configure-tailwindcss-in-react-heres-how-you-can-2j42
[22] https://apidog.com/blog/shadcn-ui-in-react-js/
[23] https://replit.com/@replit/React-Javascript
[24] https://www.bezkoder.com/react-typescript-login-example/
[25] https://github.com/mitirius/booking-react
[26] https://www.youtube.com/watch?v=MSFrqc0sq3c
[27] https://ask.replit.com/t/replit-db-output-to-node-js-express/8328
[28] https://www.arkasoftwares.com/blog/best-react-ui-framework-you-should-know-in-2025/
[29] https://www.datacamp.com/tutorial/replit-agent-ai-code-editor
[30] https://stackoverflow.com/questions/75037231/exposing-html-file-to-express-static-middleware-on-replit
[31] https://replit.com/bounties/@aleksi4/creating-a-database
[32] https://dev.to/ritza/building-a-replit-to-replit-chat-app-using-node-js-1m4n
[33] https://blockchain.oodles.io/dev-blog/integrating-google-calendar-api-into-react-application/
[34] https://blog.stackademic.com/how-to-create-a-react-typescript-project-setup-a-step-by-step-guide-like-an-experienced-df3d3ded6754?gi=000e3d37a1a6
[35] https://github.com/kristijanbambir/react-booking-calendar/
[36] https://react.email/docs
[37] https://getinkspired.com/en/story/531373/the-future-of-react-frameworks-what-s-coming-in-2025/?set_lang=1%2F
[38] https://prismic.io/blog/react-component-libraries